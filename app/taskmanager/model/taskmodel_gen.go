// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskFieldNames          = builder.RawFieldNames(&Task{})
	taskRows                = strings.Join(taskFieldNames, ",")
	taskRowsExpectAutoSet   = strings.Join(stringx.Remove(taskFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	taskRowsWithPlaceHolder = strings.Join(stringx.Remove(taskFieldNames, "`task_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTaskTaskIdPrefix = "cache:task:taskId:"
)

type (
	taskModel interface {
		Insert(ctx context.Context, data *Task) (sql.Result, error)
		FindOne(ctx context.Context, taskId string) (*Task, error)
		Update(ctx context.Context, data *Task) error
		Delete(ctx context.Context, taskId string) error
	}

	defaultTaskModel struct {
		sqlc.CachedConn
		table string
	}

	Task struct {
		TaskId       string         `db:"task_id"`       // task identifier
		CreateTime   time.Time      `db:"create_time"`   // creation time
		CreateUser   string         `db:"create_user"`   // creator user
		SceneIndex   string         `db:"scene_index"`   // scene index
		TaskStatus   string         `db:"task_status"`   // status of the task
		UpdateTime   time.Time      `db:"update_time"`   // last update time
		DatasetIndex string         `db:"dataset_index"` // dataset index
		TaskDesc     sql.NullString `db:"task_desc"`     // description of the task
		TaskName     string         `db:"task_name"`     // name of the task
	}
)

func newTaskModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTaskModel {
	return &defaultTaskModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`task`",
	}
}

func (m *defaultTaskModel) Delete(ctx context.Context, taskId string) error {
	taskTaskIdKey := fmt.Sprintf("%s%v", cacheTaskTaskIdPrefix, taskId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `task_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, taskId)
	}, taskTaskIdKey)
	return err
}

func (m *defaultTaskModel) FindOne(ctx context.Context, taskId string) (*Task, error) {
	taskTaskIdKey := fmt.Sprintf("%s%v", cacheTaskTaskIdPrefix, taskId)
	var resp Task
	err := m.QueryRowCtx(ctx, &resp, taskTaskIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `task_id` = ? limit 1", taskRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, taskId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskModel) Insert(ctx context.Context, data *Task) (sql.Result, error) {
	taskTaskIdKey := fmt.Sprintf("%s%v", cacheTaskTaskIdPrefix, data.TaskId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, taskRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TaskId, data.CreateUser, data.SceneIndex, data.TaskStatus, data.DatasetIndex, data.TaskDesc, data.TaskName)
	}, taskTaskIdKey)
	return ret, err
}

func (m *defaultTaskModel) Update(ctx context.Context, data *Task) error {
	taskTaskIdKey := fmt.Sprintf("%s%v", cacheTaskTaskIdPrefix, data.TaskId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `task_id` = ?", m.table, taskRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CreateUser, data.SceneIndex, data.TaskStatus, data.DatasetIndex, data.TaskDesc, data.TaskName, data.TaskId)
	}, taskTaskIdKey)
	return err
}

func (m *defaultTaskModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTaskTaskIdPrefix, primary)
}

func (m *defaultTaskModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `task_id` = ? limit 1", taskRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTaskModel) tableName() string {
	return m.table
}
