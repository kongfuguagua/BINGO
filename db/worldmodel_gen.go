// Code generated by goctl. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	worldFieldNames          = builder.RawFieldNames(&World{})
	worldRows                = strings.Join(worldFieldNames, ",")
	worldRowsExpectAutoSet   = strings.Join(stringx.Remove(worldFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	worldRowsWithPlaceHolder = strings.Join(stringx.Remove(worldFieldNames, "`ID`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheWorldIDPrefix = "cache:world:iD:"
)

type (
	worldModel interface {
		Insert(ctx context.Context, data *World) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*World, error)
		Update(ctx context.Context, data *World) error
		Delete(ctx context.Context, iD string) error
	}

	defaultWorldModel struct {
		sqlc.CachedConn
		table string
	}

	World struct {
		ID        string `db:"ID"`        // id
		Namespace string `db:"Namespace"` // namespace
		DLName    string `db:"DLName"`    // dlname
	}
)

func newWorldModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultWorldModel {
	return &defaultWorldModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`World`",
	}
}

func (m *defaultWorldModel) Delete(ctx context.Context, iD string) error {
	worldIDKey := fmt.Sprintf("%s%v", cacheWorldIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, worldIDKey)
	return err
}

func (m *defaultWorldModel) FindOne(ctx context.Context, iD string) (*World, error) {
	worldIDKey := fmt.Sprintf("%s%v", cacheWorldIDPrefix, iD)
	var resp World
	err := m.QueryRowCtx(ctx, &resp, worldIDKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `ID` = ? limit 1", worldRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWorldModel) Insert(ctx context.Context, data *World) (sql.Result, error) {
	worldIDKey := fmt.Sprintf("%s%v", cacheWorldIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, worldRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.Namespace, data.DLName)
	}, worldIDKey)
	return ret, err
}

func (m *defaultWorldModel) Update(ctx context.Context, data *World) error {
	worldIDKey := fmt.Sprintf("%s%v", cacheWorldIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID` = ?", m.table, worldRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Namespace, data.DLName, data.ID)
	}, worldIDKey)
	return err
}

func (m *defaultWorldModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheWorldIDPrefix, primary)
}

func (m *defaultWorldModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `ID` = ? limit 1", worldRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWorldModel) tableName() string {
	return m.table
}
