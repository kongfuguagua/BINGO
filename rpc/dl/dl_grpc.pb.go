// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: dl.proto

package dl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DLfunction_GetDLById_FullMethodName   = "/dl.DLfunction/getDLById"
	DLfunction_CreateDL_FullMethodName    = "/dl.DLfunction/createDL"
	DLfunction_InitDL_FullMethodName      = "/dl.DLfunction/initDL"
	DLfunction_InitDLModel_FullMethodName = "/dl.DLfunction/initDLModel"
	DLfunction_InitDLData_FullMethodName  = "/dl.DLfunction/initDLData"
)

// DLfunctionClient is the client API for DLfunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DLfunctionClient interface {
	GetDLById(ctx context.Context, in *DLGetRequestById, opts ...grpc.CallOption) (*DLGetResponseById, error)
	CreateDL(ctx context.Context, in *DLCreateRequest, opts ...grpc.CallOption) (*DLCreateResponse, error)
	InitDL(ctx context.Context, in *DLapp, opts ...grpc.CallOption) (*DLapp, error)
	InitDLModel(ctx context.Context, in *SetDLModelRequest, opts ...grpc.CallOption) (*DLModel, error)
	InitDLData(ctx context.Context, in *SetDLDataRequest, opts ...grpc.CallOption) (*DLDataOBJ, error)
}

type dLfunctionClient struct {
	cc grpc.ClientConnInterface
}

func NewDLfunctionClient(cc grpc.ClientConnInterface) DLfunctionClient {
	return &dLfunctionClient{cc}
}

func (c *dLfunctionClient) GetDLById(ctx context.Context, in *DLGetRequestById, opts ...grpc.CallOption) (*DLGetResponseById, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DLGetResponseById)
	err := c.cc.Invoke(ctx, DLfunction_GetDLById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dLfunctionClient) CreateDL(ctx context.Context, in *DLCreateRequest, opts ...grpc.CallOption) (*DLCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DLCreateResponse)
	err := c.cc.Invoke(ctx, DLfunction_CreateDL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dLfunctionClient) InitDL(ctx context.Context, in *DLapp, opts ...grpc.CallOption) (*DLapp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DLapp)
	err := c.cc.Invoke(ctx, DLfunction_InitDL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dLfunctionClient) InitDLModel(ctx context.Context, in *SetDLModelRequest, opts ...grpc.CallOption) (*DLModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DLModel)
	err := c.cc.Invoke(ctx, DLfunction_InitDLModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dLfunctionClient) InitDLData(ctx context.Context, in *SetDLDataRequest, opts ...grpc.CallOption) (*DLDataOBJ, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DLDataOBJ)
	err := c.cc.Invoke(ctx, DLfunction_InitDLData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DLfunctionServer is the server API for DLfunction service.
// All implementations must embed UnimplementedDLfunctionServer
// for forward compatibility.
type DLfunctionServer interface {
	GetDLById(context.Context, *DLGetRequestById) (*DLGetResponseById, error)
	CreateDL(context.Context, *DLCreateRequest) (*DLCreateResponse, error)
	InitDL(context.Context, *DLapp) (*DLapp, error)
	InitDLModel(context.Context, *SetDLModelRequest) (*DLModel, error)
	InitDLData(context.Context, *SetDLDataRequest) (*DLDataOBJ, error)
	mustEmbedUnimplementedDLfunctionServer()
}

// UnimplementedDLfunctionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDLfunctionServer struct{}

func (UnimplementedDLfunctionServer) GetDLById(context.Context, *DLGetRequestById) (*DLGetResponseById, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDLById not implemented")
}
func (UnimplementedDLfunctionServer) CreateDL(context.Context, *DLCreateRequest) (*DLCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDL not implemented")
}
func (UnimplementedDLfunctionServer) InitDL(context.Context, *DLapp) (*DLapp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDL not implemented")
}
func (UnimplementedDLfunctionServer) InitDLModel(context.Context, *SetDLModelRequest) (*DLModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDLModel not implemented")
}
func (UnimplementedDLfunctionServer) InitDLData(context.Context, *SetDLDataRequest) (*DLDataOBJ, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDLData not implemented")
}
func (UnimplementedDLfunctionServer) mustEmbedUnimplementedDLfunctionServer() {}
func (UnimplementedDLfunctionServer) testEmbeddedByValue()                    {}

// UnsafeDLfunctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DLfunctionServer will
// result in compilation errors.
type UnsafeDLfunctionServer interface {
	mustEmbedUnimplementedDLfunctionServer()
}

func RegisterDLfunctionServer(s grpc.ServiceRegistrar, srv DLfunctionServer) {
	// If the following call pancis, it indicates UnimplementedDLfunctionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DLfunction_ServiceDesc, srv)
}

func _DLfunction_GetDLById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DLGetRequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DLfunctionServer).GetDLById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DLfunction_GetDLById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DLfunctionServer).GetDLById(ctx, req.(*DLGetRequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _DLfunction_CreateDL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DLCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DLfunctionServer).CreateDL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DLfunction_CreateDL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DLfunctionServer).CreateDL(ctx, req.(*DLCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DLfunction_InitDL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DLapp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DLfunctionServer).InitDL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DLfunction_InitDL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DLfunctionServer).InitDL(ctx, req.(*DLapp))
	}
	return interceptor(ctx, in, info, handler)
}

func _DLfunction_InitDLModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDLModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DLfunctionServer).InitDLModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DLfunction_InitDLModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DLfunctionServer).InitDLModel(ctx, req.(*SetDLModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DLfunction_InitDLData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDLDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DLfunctionServer).InitDLData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DLfunction_InitDLData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DLfunctionServer).InitDLData(ctx, req.(*SetDLDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DLfunction_ServiceDesc is the grpc.ServiceDesc for DLfunction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DLfunction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dl.DLfunction",
	HandlerType: (*DLfunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getDLById",
			Handler:    _DLfunction_GetDLById_Handler,
		},
		{
			MethodName: "createDL",
			Handler:    _DLfunction_CreateDL_Handler,
		},
		{
			MethodName: "initDL",
			Handler:    _DLfunction_InitDL_Handler,
		},
		{
			MethodName: "initDLModel",
			Handler:    _DLfunction_InitDLModel_Handler,
		},
		{
			MethodName: "initDLData",
			Handler:    _DLfunction_InitDLData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dl.proto",
}
